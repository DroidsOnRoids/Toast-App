apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-kapt'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'jacoco'

apply plugin: 'composer'

apply plugin: "pl.droidsonroids.ui.test"

apply plugin: 'io.fabric'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.ajoberstar:gradle-git:1.7.2'
    }
}

import org.ajoberstar.grgit.Grgit


def git = Grgit.open(currentDir: projectDir)
def commitsOnBranchCount = git.log(includes: ['HEAD']).size()
def commitTimestamp = git.head().time

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.1'
    defaultConfig {
        applicationId "pl.droidsonrioids.toast"
        minSdkVersion 21
        targetSdkVersion 26
        versionCode commitTimestamp
        versionName "0.1.$commitsOnBranchCount"
        testInstrumentationRunner "pl.droidsonroids.toast.RxAndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storePassword 'android'
            storeFile file('../keystore/debug.keystore')
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
        staging {
            applicationIdSuffix ".staging"
            versionNameSuffix "-staging"
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            signingConfig signingConfigs.debug
        }
    }

    flavorDimensions 'api'
    productFlavors {
        letswift {
            applicationIdSuffix ".letswift"
            versionNameSuffix "-letswift"
            buildConfigField 'String', 'BASE_API_URL', '"https://api.letswift.pl/api/v1/"'
            buildConfigField 'String', 'BASE_IMAGES_URL', '"https://api.letswift.pl"'
        }
        toast {
            // TODO change api url to toast when available
            buildConfigField 'String', 'BASE_API_URL', '"https://api.letswift.pl/api/v1/"'
            buildConfigField 'String', 'BASE_IMAGES_URL', '"https://api.letswift.pl"'
        }
        mockUiTest {
            applicationIdSuffix ".letswift"
            versionNameSuffix "-letswift"
            buildConfigField 'String', 'BASE_API_URL', '"http://localhost:12345"'
            buildConfigField 'String', 'BASE_IMAGES_URL', '"https://api.letswift.pl"'
        }
    }

    dataBinding {
        enabled = true
    }
}

androidExtensions {
    experimental = true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$versions.kotlin"

    // android
    implementation "com.android.support:appcompat-v7:$versions.support"
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation "com.android.support:design:$versions.support"
    implementation "com.android.support:support-v4:$versions.support"
    implementation "com.android.support:cardview-v7:$versions.support"
    implementation "com.android.support:palette-v7:$versions.support"

    // retrofit
    implementation "com.squareup.retrofit2:retrofit:$versions.retrofit"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$versions.retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$versions.retrofit"
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.1'

    // rxjava
    implementation "io.reactivex.rxjava2:rxkotlin:2.1.0"
    implementation "io.reactivex.rxjava2:rxandroid:2.0.1"

    //dagger
    kapt "com.google.dagger:dagger-compiler:$versions.dagger"
    kapt "com.google.dagger:dagger-android-processor:$versions.dagger"
    implementation "com.google.dagger:dagger-android-support:$versions.dagger"
    implementation "com.google.dagger:dagger-android:$versions.dagger"

    // chuck
    debugImplementation "com.readystatesoftware.chuck:library:$versions.chuck"
    releaseImplementation "com.readystatesoftware.chuck:library-no-op:$versions.chuck"

    // architecture components
    kapt "android.arch.lifecycle:compiler:$versions.lifecycle"
    implementation "android.arch.lifecycle:extensions:$versions.lifecycle"

    // data binding
    kapt 'com.android.databinding:compiler:3.0.1'

    // glide
    implementation "com.github.bumptech.glide:glide:$versions.glide"
    implementation 'com.github.florent37:glidepalette:2.1.2'

    // facebook
    implementation 'com.facebook.android:facebook-login:4.30.0'

    // firebase
    implementation 'com.google.firebase:firebase-core:11.8.0'

    // crashlytics
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.1@aar'){
        transitive = true
    }

    // timber logger
    implementation 'com.jakewharton.timber:timber:4.6.1'

    implementation 'com.alexvasilkov:gesture-views:2.4.1'

    // tests
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.12.0'
    testImplementation 'com.nhaarman:mockito-kotlin-kt1.1:1.5.0', {
        exclude group: 'org.jetbrains.kotlin'
    }
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test:rules:1.0.1'
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$versions.espresso"
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:$versions.espresso"
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:$versions.espresso"
    androidTestImplementation('com.squareup.rx.idler:rx2-idler:0.9.0') {
        exclude group: 'io.reactivex.rxjava2', module: 'rxjava'
    }
    androidTestImplementation "pl.droidsonroids.testing:mockwebserver-path-dispatcher:1.0.1"
}

repositories {
    mavenCentral()
}

uiTest {
    uiTestReporter 'test%sComposer'
}

tasks.addRule("Pattern: jacoco<Variant>TestReport") { String taskName ->
    def matcher = (taskName =~ "jacoco(\\w*)TestReport")
    if (matcher.matches()) {
        def variant = matcher[0][1]
        createTestReportTask(taskName, variant)
    }
}

private Task createTestReportTask(String taskName, String variant) {
    task(taskName, type: JacocoReport, dependsOn: "test${variant}UnitTest") {

        reports {
            xml.enabled = true
            html.enabled = true
        }

        def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/app/**', '**/di/**']
        def debugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${variant.uncapitalize()}", excludes: fileFilter)
        def mainSrc = "${project.projectDir}/src/main/java"

        sourceDirectories = files(mainSrc)
        classDirectories = files(debugTree)
        executionData = fileTree(dir: "$buildDir", includes: ["jacoco/test${variant}UnitTest.exec"])
    }
}

if (file("google-services.json").isFile()) {
    apply plugin: 'com.google.gms.google-services'
}
